# SPDX-FileCopyrightText: OpenTalk GmbH <mail@opentalk.eu>
#
# SPDX-License-Identifier: EUPL-1.2

---
default:
  image: node:18-alpine

stages:
  - lint
  - test
  - build
  - deploy

lint:prettier+eslint:
  stage: lint
  before_script:
    - apk add git
    - yarn install
  script:
    - yarn lint --no-inline-config --max-warnings 0
    - yarn workspaces foreach -pA run fmt:ci

lint:yaml:
  stage: lint
  image: archlinux:latest
  before_script:
    - pacman -Syy --noconfirm yamllint
  script: yamllint .

lint:compliance:
  stage: lint
  before_script:
    - apk add git
    - yarn install
  script:
    - yarn dlx licensee --production --errors-only

lint:licensing:
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: ['']
  script:
    - reuse lint

lint:audit:
  stage: lint
  script:
    - yarn npm audit --environment production -RA

test:build:
  stage: test
  before_script:
    - apk add git
    - yarn install
  script:
    - yarn test
    - yarn build


test:container:
  stage: test
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - >
      echo
      "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" >
      /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --registry-mirror=mirror.gcr.io
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci/Dockerfile
      --no-push
      --force

build:container:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG != null
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - >
      echo
      "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" >
      /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --registry-mirror=mirror.gcr.io
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      --destination $CI_REGISTRY_IMAGE:latest
      --force

build:container-profiling:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG != null
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - >
      echo
      "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" >
      /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --registry-mirror=mirror.gcr.io
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/ci/Dockerfile
      --destination $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG:+$CI_COMMIT_TAG-}profiling
      --destination $CI_REGISTRY_IMAGE:profiling
      --build-arg BUILD_TYPE="build:profiler"
      --force

publish:common:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG != null
      changes:
        - packages/common/**/*
  before_script:
    - apk add git
    - yarn install
  script:
    - yarn build
    # If no .npmrc is included in the repo, generate a temporary one that is configured
    # to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information:
        https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/434/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/434/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc
    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./packages/common/package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./packages/common/package.json').version")
    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project,
        e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information,
        see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi
    # Compare the version in /common/package.json to all published versions.
    # If the package.json version has not yet been published, run `yarn publish:npm`.
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        yarn publish:npm
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME}
        to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has
        already been published, so no new version has been published."
      fi
